# Generated from grammar/Larisha.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,272,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,1,
        1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,
        1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
        1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,3,29,180,8,29,1,30,1,30,5,30,184,8,30,10,30,
        12,30,187,9,30,1,30,1,30,1,31,4,31,192,8,31,11,31,12,31,193,1,31,
        1,31,4,31,198,8,31,11,31,12,31,199,1,32,4,32,203,8,32,11,32,12,32,
        204,1,33,1,33,1,33,1,33,3,33,211,8,33,1,33,1,33,1,34,4,34,216,8,
        34,11,34,12,34,217,1,34,1,34,1,35,1,35,1,35,1,35,5,35,226,8,35,10,
        35,12,35,229,9,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,5,
        36,240,8,36,10,36,12,36,243,9,36,1,36,1,36,1,37,1,37,5,37,249,8,
        37,10,37,12,37,252,9,37,4,37,254,8,37,11,37,12,37,255,1,37,1,37,
        1,37,1,37,1,37,5,37,263,8,37,10,37,12,37,266,9,37,5,37,268,8,37,
        10,37,12,37,271,9,37,1,227,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,1,0,6,1,0,34,
        34,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,284,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,1,77,1,0,0,0,3,79,1,0,0,0,5,81,1,0,0,0,7,84,1,0,0,0,9,
        86,1,0,0,0,11,88,1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,17,97,1,0,0,
        0,19,99,1,0,0,0,21,101,1,0,0,0,23,103,1,0,0,0,25,105,1,0,0,0,27,
        107,1,0,0,0,29,109,1,0,0,0,31,111,1,0,0,0,33,114,1,0,0,0,35,117,
        1,0,0,0,37,120,1,0,0,0,39,123,1,0,0,0,41,126,1,0,0,0,43,129,1,0,
        0,0,45,131,1,0,0,0,47,133,1,0,0,0,49,139,1,0,0,0,51,146,1,0,0,0,
        53,152,1,0,0,0,55,159,1,0,0,0,57,166,1,0,0,0,59,179,1,0,0,0,61,181,
        1,0,0,0,63,191,1,0,0,0,65,202,1,0,0,0,67,206,1,0,0,0,69,215,1,0,
        0,0,71,221,1,0,0,0,73,235,1,0,0,0,75,253,1,0,0,0,77,78,5,59,0,0,
        78,2,1,0,0,0,79,80,5,61,0,0,80,4,1,0,0,0,81,82,5,105,0,0,82,83,5,
        102,0,0,83,6,1,0,0,0,84,85,5,40,0,0,85,8,1,0,0,0,86,87,5,41,0,0,
        87,10,1,0,0,0,88,89,5,101,0,0,89,90,5,108,0,0,90,91,5,115,0,0,91,
        92,5,101,0,0,92,12,1,0,0,0,93,94,5,44,0,0,94,14,1,0,0,0,95,96,5,
        33,0,0,96,16,1,0,0,0,97,98,5,45,0,0,98,18,1,0,0,0,99,100,5,42,0,
        0,100,20,1,0,0,0,101,102,5,47,0,0,102,22,1,0,0,0,103,104,5,37,0,
        0,104,24,1,0,0,0,105,106,5,43,0,0,106,26,1,0,0,0,107,108,5,60,0,
        0,108,28,1,0,0,0,109,110,5,62,0,0,110,30,1,0,0,0,111,112,5,60,0,
        0,112,113,5,61,0,0,113,32,1,0,0,0,114,115,5,62,0,0,115,116,5,61,
        0,0,116,34,1,0,0,0,117,118,5,61,0,0,118,119,5,61,0,0,119,36,1,0,
        0,0,120,121,5,33,0,0,121,122,5,61,0,0,122,38,1,0,0,0,123,124,5,38,
        0,0,124,125,5,38,0,0,125,40,1,0,0,0,126,127,5,124,0,0,127,128,5,
        124,0,0,128,42,1,0,0,0,129,130,5,123,0,0,130,44,1,0,0,0,131,132,
        5,125,0,0,132,46,1,0,0,0,133,134,5,98,0,0,134,135,5,114,0,0,135,
        136,5,101,0,0,136,137,5,97,0,0,137,138,5,107,0,0,138,48,1,0,0,0,
        139,140,5,114,0,0,140,141,5,101,0,0,141,142,5,116,0,0,142,143,5,
        117,0,0,143,144,5,114,0,0,144,145,5,110,0,0,145,50,1,0,0,0,146,147,
        5,119,0,0,147,148,5,104,0,0,148,149,5,105,0,0,149,150,5,108,0,0,
        150,151,5,101,0,0,151,52,1,0,0,0,152,153,5,101,0,0,153,154,5,120,
        0,0,154,155,5,112,0,0,155,156,5,111,0,0,156,157,5,114,0,0,157,158,
        5,116,0,0,158,54,1,0,0,0,159,160,5,105,0,0,160,161,5,109,0,0,161,
        162,5,112,0,0,162,163,5,111,0,0,163,164,5,114,0,0,164,165,5,116,
        0,0,165,56,1,0,0,0,166,167,5,102,0,0,167,168,5,117,0,0,168,169,5,
        110,0,0,169,58,1,0,0,0,170,171,5,116,0,0,171,172,5,114,0,0,172,173,
        5,117,0,0,173,180,5,101,0,0,174,175,5,102,0,0,175,176,5,97,0,0,176,
        177,5,108,0,0,177,178,5,115,0,0,178,180,5,101,0,0,179,170,1,0,0,
        0,179,174,1,0,0,0,180,60,1,0,0,0,181,185,5,34,0,0,182,184,8,0,0,
        0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,
        0,186,188,1,0,0,0,187,185,1,0,0,0,188,189,5,34,0,0,189,62,1,0,0,
        0,190,192,7,1,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,
        0,193,194,1,0,0,0,194,195,1,0,0,0,195,197,5,46,0,0,196,198,7,1,0,
        0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,
        0,200,64,1,0,0,0,201,203,7,1,0,0,202,201,1,0,0,0,203,204,1,0,0,0,
        204,202,1,0,0,0,204,205,1,0,0,0,205,66,1,0,0,0,206,210,5,39,0,0,
        207,211,9,0,0,0,208,209,5,92,0,0,209,211,9,0,0,0,210,207,1,0,0,0,
        210,208,1,0,0,0,211,212,1,0,0,0,212,213,5,39,0,0,213,68,1,0,0,0,
        214,216,7,2,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,0,0,
        217,218,1,0,0,0,218,219,1,0,0,0,219,220,6,34,0,0,220,70,1,0,0,0,
        221,222,5,47,0,0,222,223,5,42,0,0,223,227,1,0,0,0,224,226,9,0,0,
        0,225,224,1,0,0,0,226,229,1,0,0,0,227,228,1,0,0,0,227,225,1,0,0,
        0,228,230,1,0,0,0,229,227,1,0,0,0,230,231,5,42,0,0,231,232,5,47,
        0,0,232,233,1,0,0,0,233,234,6,35,0,0,234,72,1,0,0,0,235,236,5,47,
        0,0,236,237,5,47,0,0,237,241,1,0,0,0,238,240,8,3,0,0,239,238,1,0,
        0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,244,1,0,
        0,0,243,241,1,0,0,0,244,245,6,36,0,0,245,74,1,0,0,0,246,250,7,4,
        0,0,247,249,7,5,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,
        0,0,250,251,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,253,246,1,0,
        0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,269,1,0,
        0,0,257,258,5,45,0,0,258,259,5,62,0,0,259,260,1,0,0,0,260,264,7,
        4,0,0,261,263,7,5,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,
        0,0,0,264,265,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,267,257,1,
        0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,76,1,0,
        0,0,271,269,1,0,0,0,14,0,179,185,193,199,204,210,217,227,241,250,
        255,264,269,1,6,0,0
    ]

class LarishaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    WHILE = 26
    EXPORT = 27
    IMPORT = 28
    FUNCTION = 29
    BOOL = 30
    STRING = 31
    FLOAT = 32
    INTEGER = 33
    CHAR = 34
    WS = 35
    COMMENT = 36
    LINE_COMMENT = 37
    IDENTIFIER = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'='", "'if'", "'('", "')'", "'else'", "','", "'!'", 
            "'-'", "'*'", "'/'", "'%'", "'+'", "'<'", "'>'", "'<='", "'>='", 
            "'=='", "'!='", "'&&'", "'||'", "'{'", "'}'", "'break'", "'return'", 
            "'while'", "'export'", "'import'", "'fun'" ]

    symbolicNames = [ "<INVALID>",
            "WHILE", "EXPORT", "IMPORT", "FUNCTION", "BOOL", "STRING", "FLOAT", 
            "INTEGER", "CHAR", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "WHILE", 
                  "EXPORT", "IMPORT", "FUNCTION", "BOOL", "STRING", "FLOAT", 
                  "INTEGER", "CHAR", "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER" ]

    grammarFileName = "Larisha.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


